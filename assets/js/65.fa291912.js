(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{834:function(a,r,t){"use strict";t.r(r);var v=t(115),e=Object(v.a)({},function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),t("p",[a._v("java虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。")]),a._v(" "),t("p",[a._v("根据 "),t("strong",[a._v("《java虚拟机规范（Java SE 7版）》")]),a._v(" 的规定，java虚拟机所管理的内存将会包括以下几个运行时数据区域，如图：")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"运行时数据区域",href:"/pic/aboutjava/SKfyfJr.png"}},[t("img",{attrs:{src:"/pic/aboutjava/SKfyfJr.png",alt:"运行时数据区域"}})])]),a._v(" "),t("h2",{attrs:{id:"程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器","aria-hidden":"true"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),t("p",[t("strong",[a._v("程序计数器（Program Counter Register）")]),a._v(" 是一块较小的内存空间，他可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成")]),a._v(" "),t("p",[a._v("由于java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行为止，每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存为“ "),t("strong",[a._v("线程私有")]),a._v(" ”的内存")]),a._v(" "),t("p",[a._v("如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值为空（Undefined）。此内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域")]),a._v(" "),t("h2",{attrs:{id:"java虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java虚拟机栈","aria-hidden":"true"}},[a._v("#")]),a._v(" java虚拟机栈")]),a._v(" "),t("p",[a._v("与程序计数器一样， "),t("strong",[a._v("java虚拟机栈（Java Virtual Machine Stacks）")]),a._v(" 也是线程私有的，它们的生命周期和线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量、操作数栈、动态链接、方法出口等信息，每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程")]),a._v(" "),t("p",[a._v("局部变量表存放了编译器可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用地址，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）")]),a._v(" "),t("p",[a._v("局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小")]),a._v(" "),t("p",[a._v("在java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将会抛出StackOverflowError异常；如果虚拟机可以动态扩展（当前大部分的java虚拟机都可以动态扩展，只不过java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常")]),a._v(" "),t("h2",{attrs:{id:"本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈","aria-hidden":"true"}},[a._v("#")]),a._v(" 本地方法栈")]),a._v(" "),t("p",[t("strong",[a._v("本地方法栈（Native Method Stack）")]),a._v(" 与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行java方法（也就是字节码）服务，而本地方法栈则是虚拟机使用到的Native方法服务。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常")]),a._v(" "),t("h2",{attrs:{id:"java堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java堆","aria-hidden":"true"}},[a._v("#")]),a._v(" java堆")]),a._v(" "),t("p",[t("strong",[a._v("java堆（java Heap）")]),a._v(" 是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。")]),a._v(" "),t("p",[a._v("从内存回收的角度来看，java堆可以细分为 "),t("strong",[a._v("新生代")]),a._v(" 和 "),t("strong",[a._v("老年代")]),a._v(" ；再细致一点的有 "),t("strong",[a._v("Eden空间")]),a._v(" 、 "),t("strong",[a._v("From Survior空间")]),a._v(" 、 "),t("strong",[a._v("To Survivor空间")]),a._v(" 等。从内存分配的角度来看，线程共享的Java堆中可能划分为 "),t("strong",[a._v("多个线程私有的分配缓冲区（Thread Local Allocation Buffer， TLAB）。")])]),a._v(" "),t("p",[a._v("如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常")]),a._v(" "),t("h2",{attrs:{id:"方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区","aria-hidden":"true"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),t("p",[t("strong",[a._v("方法区（Method Area）")]),a._v(" 与java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。")]),a._v(" "),t("p",[a._v("java虚拟机规范对方法区的限制非常宽松，除了和java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是很少出现的，但非数据进入方法区就如永久代的名字一样“永久”存在了。 这个区域的内存回收目标主要是针对常量池的回收和类型的卸载。")]),a._v(" "),t("p",[a._v("根据java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常")]),a._v(" "),t("h3",{attrs:{id:"运行时常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池","aria-hidden":"true"}},[a._v("#")]),a._v(" 运行时常量池")]),a._v(" "),t("p",[t("strong",[a._v("运行时常量池（Runtime Constant Pool）")]),a._v(" 是方法区的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外，还有一项信息是 "),t("strong",[a._v("常量池（Constant Pool Table）")]),a._v(" ，用于存放编译期生成的各种字面量和符号引用，这部分将在类加载后进入方法区的运行时常量池存放。")]),a._v(" "),t("p",[a._v("运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用的比较多的是String类的intern()方法")]),a._v(" "),t("p",[a._v("既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。")])])},[],!1,null,null,null);r.default=e.exports}}]);