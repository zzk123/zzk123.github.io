(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{854:function(t,a,s){"use strict";s.r(a);var n=s(115),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("blockquote",[s("p",[t._v("观察者模式是使用频率最高的设计模式之一，用于建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应，在观察者模式中，发生改变的对象称之为观察目标，而被通知的对象称之为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展")])]),t._v(" "),s("h2",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("blockquote",[s("p",[t._v("观察者模式（Observer Pattern）：定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式的别名包括发布-订阅（Publish/Subscribe）模式、模式-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。观察者模式是一种"),s("strong",[t._v("对象行为型模式")])])]),t._v(" "),s("h2",{attrs:{id:"结构图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构图","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构图")]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"结构图",href:"/pic/design/t54GKUD.png"}},[s("img",{attrs:{src:"/pic/design/t54GKUD.png",alt:"结构图"}})])]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("Subject（目标）")]),t._v("：目标又称为主题，它是指被观察的对象。在目标中定义一个观察者集合，一个观察者目标可以接受任意数量的观察者来观察，它提供一系列方法来增加和删除观察者对象，同时定义了通知方法notify().目标类可以是接口，也可以是抽象类或者具体类。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ConcreteSubject（具体目标）")]),t._v("：具体目标是目标类的子类，通常包含有经常发生改变的数据，当它的状态发生改变时，向其各个观察者发出通知；同时它还实现了在目标类中定义的抽象业务逻辑方法（如果有的话），如果无需扩展目标类，则具体目标类即可。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Observer(观察者)")]),t._v("：观察者将对观察目标的改变作出反应，观察者一般定义为接口，该接口声明了更新数据的方法update(),因此又称为抽象观察者。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ConcreteObserver（具体观察者）")]),t._v("：在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致；它实现了在抽象观察者Observer中声明的update（）方法。通常在实现时，可以调用具体目标类的attach()方法将自己添加到目标类的集合中或通过detach()方法将自己从目标类的集合中删除。")])])]),t._v(" "),s("h2",{attrs:{id:"示意代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示意代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 示意代码")]),t._v(" "),s("p",[t._v("观察者模式描述了如何建立对象与对象之间的依赖关系，以及如何构造满足这种需求的系统，观察者模式包含观察目标和观察者两类对象，一个目标可以有任意数目的与之相知的响应，每一个观察者都将监视观察目标的状态以使其状态与目标状态同步，这种交互也称为"),s("strong",[t._v("发布-订阅（Publish-Subscribe）")]),t._v("。观察目标是通知的发布者，它发出通知时并不需要知道谁是它的观察者，可以有任意数目的观察者订阅它并接受通知。")]),t._v(" "),s("p",[s("strong",[t._v("首先定义一个抽象目标Subject，典型代码如下：")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tabstract class Subject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t//定义一个观察者集合用于存储所有观察则对象\n\t\tprotected ArrayList observers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Observer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ArrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n\t\t//注册方法，用于向观察者集合中添加一个观察者\n\t\tpublic void attach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Observer observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tobservers.add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t//注销方法，用于在观察者集合中删除一个观察者\n\t\tpublic void detach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Observer observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tobservers.remove"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t\t//声明抽象通知方法\n\t\tpublic abstract void notify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("具体目标类ConcreteSubject是实现抽象目标类Subject的一个具体子类，其典型代码如下：")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tclass ConcreteSubject extends Subject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t//实现通知方法\n\t\tpublic void notify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t//遍历观察者集合，调用每一个观察者的响应方法\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("Observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("obs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("抽象观察者角色一般定义为一个接口，通常只声明一个update()方法，为不同观察者的更新（响应）行为定义相同的接口，这个方法在其子类中实现，不同的观察者具有不同的相应方法，抽象观察者Observer典型代码如下")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tinterface Observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t//声明响应方法\n\t\tpublic void update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("在具体观察者ConcreteObserver中实现了update()方法，其典型代码如下：")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tclass ConcreteObserver implements Observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t//实现响应方法\n\t\tpublic void update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t//具体响应代码\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在有些更加复杂的情况下，具体观察者类ConcreteObserver的update（）方法在执行时需要使用到具体目标类ConcreteSubject中的状态（属性），因此在ConcreteObserver与ConcreteSubject的实例之间有时候还存在着关联或者依赖关系，在ConcreteObserver中定义一个ConcreteSubject实例，通过该实例获取存储在ConcreteSubject中的状态。如果ConcreteObserver的update()方法不需要使用到ConcreteSubject中的状态属性，则可以对观察者模式的标准结构进行简化，在具体观察者ConcreteObserver和具体目标ConcreteSubject之间无需维持对象引用。如果在具体层具有关联关系，系统的扩展性将受到一定的影响增加新的具体目标类有时需要修改原有观察者的代码，在一定程度上违背开闭原则，但如果原有观察者类无需关联新增的具体目标，系统的扩展性不受影响。")]),t._v(" "),s("h2",{attrs:{id:"实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),s("p",[t._v("使用观察者模式来进行多人联机对战游戏的设计")]),t._v(" "),s("h3",{attrs:{id:"结构图-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构图-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构图")]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"结构图",href:"/pic/design/2GOS1cM.png"}},[s("img",{attrs:{src:"/pic/design/2GOS1cM.png",alt:"结构图"}})])]),t._v(" "),s("h3",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("p",[s("strong",[t._v("抽象观察类")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tpublic interface Observer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tpublic String getName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\n\t\tpublic void setName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tpublic void help"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t//声明支援盟友方法\n\t\tpublic void beAttacked"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AllyControlCenter acc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t//声明遭受攻击的方法\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("战队成员类：具体观察者类")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tpublic class Player implements Observer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t\tprivate String name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n\t\tpublic Player"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tthis.name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\t@Override\n\t\tpublic String getName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" this.name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t\t@Override\n\t\tpublic void setName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tthis.name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t\t//支援盟友方法的实现\n\t\tpublic void help"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"坚持住，"')]),t._v("+ this.name + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"来救你了！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t\t//遭受攻击方法的实现，当遭受攻击时将调用战队控制中心类的通知方法notifyObserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("来通知盟友\n\t\tpublic void beAttacked"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AllyControlCenter acc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("this.name + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"被攻击！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tacc.notifyObserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("战队控制中心类：目标类")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tabstract class AllyControlCenter "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tprotected String allyName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t//战队名称\n\t\tprotected ArrayList"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Observer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" plays "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ArrayList"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Observer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//定义一个集合， 存储战队成员\n\t\t\n\t\tpublic String getAllyName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" allyName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\tpublic void setAllyName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String allyName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tthis.allyName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" allyName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\t//注册方法\n\t\tpublic void join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Observer obs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obs.getName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"加入"')]),t._v(" + this.allyName + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"战队"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tplays.add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\t//注销方法\n\t\tpublic void quit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Observer obs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obs.getName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"退出"')]),t._v(" + this.allyName + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"战队"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tplays.remove"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\t//声明抽象通知方法\n\t\tpublic abstract void notifyObserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("具体战队控制中心类：具体目标类")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tpublic class ConcreteAllyControlCenter extends AllyControlCenter "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t\tpublic ConcreteAllyControlCenter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String allyName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("allyName + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"战队组件成功"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-----------"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tthis.allyName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" allyName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\t//实现通知方法\n\t\tpublic void notifyObserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("this.allyName + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"战队紧急通知，盟友"')]),t._v(" + name + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"遭受敌人攻击"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t//遍历观察者集合，调用每个盟友的支援方法\n\t\t\tfor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object obs "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" plays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tif"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("Observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("obs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".getName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".equalsIgnoreCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("Observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("obs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".help"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("客户端")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\tpublic class Client "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tpublic static void main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t//定义观察目标对象\n\t\t\tAllyControlCenter acc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tacc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ConcreteAllyControlCenter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"金庸群侠"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\n\t\t\t//定义4个观察者对象\n\t\t\tObserver play1,play2,play3,play4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\n\t\t\tplay1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Player"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"杨过"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tacc.join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("play1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\n\t\t\tplay2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Player"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"令狐冲"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tacc.join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("play2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\n\t\t\tplay3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Player"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张无忌"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tacc.join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("play3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\n\t\t\tplay4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Player"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"段誉"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tacc.join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("play4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\n\t\t\t//某成员遭受到攻击\n\t\t\tplay1.beAttacked"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在本实例张，实现了两次对象之间的联动，当一个游戏玩家Player对象的beAttracked()方法被调用时，将调用AllyControlCenter的notifyObserver()方法来进行处理，而在notifyObserver()方法中又调用了其他Player对象的help()方法。Player的beAttracked()方法，AllyControlCenter的notifyObserver()方法以及Player的help()方法构成了一个联动触发链，执行顺序如下：\nPlayer.beAttracked() -> AllyControlCenter.notifyObserver() -> Player.help()")]),t._v(" "),s("h2",{attrs:{id:"观察者与mvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#观察者与mvc","aria-hidden":"true"}},[t._v("#")]),t._v(" 观察者与MVC")]),t._v(" "),s("p",[t._v("在当前很流行的MVC（Model-View-Controller）架构中也应用了观察者模式，MVC是一种架构模式，它包含了3种角色："),s("strong",[t._v("模型（Model）")]),t._v("，"),s("strong",[t._v("视图（View）"),s("strong",[t._v("和")]),t._v("控制器（Controller）")]),t._v("。其中，模型可对应于观察者模式中的观察目标，而视图对应与观察者，控制器可充当两者之间的中介者。当模型层的数据发生变化时，视图层将自动改变其显示内容。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("观察者模式是一种使用频率非常高的设计模式，无论是移动应用，Web应用或者桌面应用，观察者模式几乎无处不在，它为实现对象之间的联系提供了一套完整的解决方案，凡是涉及一对一或者一对多的对象交互场景都可以使用观察者模式。观察者模式广泛应用于各种编程语言的GUI事件处理的实现，在基于事件的XML解析技术（例如SAX2）以及Web事件处理中也使用了观察者模式")]),t._v(" "),s("h2",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("观察者模式可以实现表示层和数据逻辑层的分离，定义了稳定的消息更新传递机制，并抽象了更新接口，使得可以有各种各样不同的表示层充当具体观察者角色")])]),t._v(" "),s("li",[s("p",[t._v("观察者模式在观察目标和观察者之间建立一个抽象的耦合。观察目标只需要维持一个抽象观察者的集合，无须了解其具体观察者。由于观察目标和观察者没有紧密地耦合在一起，因此它们可以属于不同地抽象化层次")])]),t._v(" "),s("li",[s("p",[t._v("观察者模式支持广播通信，观察目标会向所有已注册地观察者对象发送通知，简化一对多系统设计的难度")])]),t._v(" "),s("li",[s("p",[t._v("观察者模式满足开闭原则的要求，增加新的具体观察者无需修改原有系统代码，在具体观察者与观察目标之间不存在关联关系的情况下，增加新的观察目标也很方便")])])]),t._v(" "),s("h2",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点","aria-hidden":"true"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("如果一个观察目标对象有很多直接和间接观察者，将所有的观察者都通知到会花费很多时间")])]),t._v(" "),s("li",[s("p",[t._v("如果在观察者和观察目标之间存在循环依赖，观察目标会触发它们之间进行循环调用，可能导致系统崩溃")])]),t._v(" "),s("li",[s("p",[t._v("观察者模式没有相应的机制让观察者知道所观察的目标对象时怎么发生变化的，而仅仅只是知道观察目标发生了变化")])])]),t._v(" "),s("h2",{attrs:{id:"使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("一个抽象模型有两个方面，其中一个方法依赖于另一个方面，将这两个方面封装在独立的对象中是，使它们可以各自独立地改变和复用")])]),t._v(" "),s("li",[s("p",[t._v("一个对象的改变将导致一个或多个其他对象也发生改变，而并不知道具体有多少对象将发生改变，也不知道这些对象是谁")])]),t._v(" "),s("li",[s("p",[t._v("需要在系统给中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象.....可以使用观察者模式创建一种链式触发机制")])])])])},[],!1,null,null,null);a.default=e.exports}}]);