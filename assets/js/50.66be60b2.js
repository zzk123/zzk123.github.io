(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{858:function(t,a,s){"use strict";s.r(a);var n=s(115),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"第十三条：使类和成员的可访问性最小化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十三条：使类和成员的可访问性最小化","aria-hidden":"true"}},[t._v("#")]),t._v(" 第十三条：使类和成员的可访问性最小化")]),t._v(" "),s("blockquote",[s("p",[t._v("尽可能地使每个类或成员不被外界访问")])]),t._v(" "),s("p",[t._v("要区别设计良好的模块与设计不好的模块，最重要的因素在于，这个模块对于外部的其他模块而言，是否隐藏其内部数据和其他实现细节。设计良好的模块会隐藏所有的实现细节，把它的API与它的实现清晰地隔离开来，然后，模块之间只通过它们的API进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为"),s("strong",[t._v("信息隐藏")]),t._v("或"),s("strong",[t._v("封装")]),t._v("，是软件设计的基本原则之一")]),t._v(" "),s("p",[t._v("Java程序设计语言提供了许多机制来协助信息隐藏。"),s("strong",[t._v("访问控制（access control）机制")]),t._v("决定了类、接口和成员的可访问性（accessibility）。实体的可访问性是由该实体声明所在的位置，以及该实体声明中所出现的访问修饰符（private、protected和public）共同决定的，正确地使用这些修饰符对于实现信息隐藏是非常关键的")]),t._v(" "),s("h3",{attrs:{id:"对于成员（域、方法、嵌套类和嵌套接口）有四种访问级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对于成员（域、方法、嵌套类和嵌套接口）有四种访问级别","aria-hidden":"true"}},[t._v("#")]),t._v(" 对于成员（域、方法、嵌套类和嵌套接口）有四种访问级别")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("私有的（private）")]),t._v("：只有在声明该成员的顶层类内部才可以访问这个成员")]),t._v(" "),s("li",[s("strong",[t._v("包级私有的（package-private）")]),t._v('：声明该成员的包内部的任何类都可以访问这个成员。从技术上讲，它被称为"缺省（default）访问级别",如果没有为成员指定访问修饰符，就采用这个访问级别')]),t._v(" "),s("li",[s("strong",[t._v("受保护的（protected）")]),t._v("：声明该成员的类的子类可以访问这个成员，并且声明该成员的包内部的任何类也可以访问这个成员")]),t._v(" "),s("li",[s("strong",[t._v("公有的（public）")]),t._v("：在任何地方都可以访问该成员")])]),t._v(" "),s("blockquote",[s("p",[t._v("补充：类具有公有的静态final数组域，或者返回这种域的访问方法，这几乎是错误的，如果类具有这样的域或者访问方法，客户端将能够修改数组中的内容，这是安全漏洞的一个常见根源：")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    public static final Thing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" VALUES "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"第十四条：在公有类中使用访问方法非公有域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十四条：在公有类中使用访问方法非公有域","aria-hidden":"true"}},[t._v("#")]),t._v(" 第十四条：在公有类中使用访问方法非公有域")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    class Point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        public double x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        public double y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对于可变的类来说，应包含私有域和公有设值的方法（setter）的类代替如下")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    class Point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        private double x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        private double y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        public Point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double x, double y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            this.x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            this.y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        public double getX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        public double getY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        public void setX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            this.x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        public void setY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            this.y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"第十五条：使可变性最小化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十五条：使可变性最小化","aria-hidden":"true"}},[t._v("#")]),t._v(" 第十五条：使可变性最小化")]),t._v(" "),s("blockquote",[s("p",[t._v("不可变类只是其实例不能被修改的类，每个实例中所包含的所有信息必须在创建该实例的时候就提供，并在对象的整个生命周期（lifetime）内固定不变。java平台类库中包含许多不可变类，其中有String、基本类型的包装类、BigInteger和BigDecimal。存在不可变的类有许多理由：不可变的类比可变类更加易于设计、实现和使用。")])]),t._v(" "),s("h3",{attrs:{id:"为了使类称为不可变，要遵循下面五条规则："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为了使类称为不可变，要遵循下面五条规则：","aria-hidden":"true"}},[t._v("#")]),t._v(" 为了使类称为不可变，要遵循下面五条规则：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("不要提供任何会修改对象状态的方法（也称mutator，即改变对象属性的方法）")])]),t._v(" "),s("li",[s("strong",[t._v("保证类不会被扩展")]),t._v("：这样可以防止恶意的子类假装对象的状态已经改变，从而破坏该类的不可变行为，为了防止子类化，一般的做法是使这个类成为final的，还有另一种方法就是，让类的所有构造器都变成私有的或者包级私有的并添加公有的静态工厂（static factory）来代替公有的构造器")]),t._v(" "),s("li",[s("strong",[t._v("使所有的域都是final的")])]),t._v(" "),s("li",[s("strong",[t._v("使所有的域成为私有的")]),t._v("：可以防止客户端获得访问被域引用额可变对象的权限，并防止客户端直接修改这些对象")]),t._v(" "),s("li",[s("strong",[t._v("确保对于任何可变组件的互斥访问")]),t._v("：如果类具有指向可变对象的域，则必须确保该类的客户端无法获得指向这些对象的引用，并且，永远不要用客户端提供的对象引用来初始化这样的域，也不要从任何访问方法（accessor）中返回该对象的引用")])]),t._v(" "),s("blockquote",[s("p",[t._v("不可变对象的优点：在于本质上线程安全，不要求同步，不仅可以被自由地共享，而且也可以共享内部信息，唯一的缺点是：对于每个不同的值都需要一个单独的对象")])]),t._v(" "),s("h2",{attrs:{id:"第十六条：复合优先于继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十六条：复合优先于继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 第十六条：复合优先于继承")]),t._v(" "),s("p",[s("strong",[t._v("继承（指的实现继承（implementation inheritance）")]),t._v("，一个类扩展另一个类）是实现代码重用的有力手段，但是并非永远是完成这项工作的最佳工具，使用不当会导致软件变得很脆弱")]),t._v(" "),s("p",[t._v("与方法调用不同的是，继承打破了封装性。如子类依赖于其超类中特定功能的实现细节，超类的实现可能随着发行版本的不同有所变化，如果真的发生了变化，子类可能遭到破坏，因此子类必须要跟着其超类的更新而演变，除非超类是专门为了扩展而设计的，并且具有很好的文档说明")]),t._v(" "),s("p",[s("strong",[t._v("复合")]),t._v("是指在新的类中增加一个私有域，引用现有类的一个实例，新类中的每个实例方法都可以调用被包含的现有类实例中对应的方法，并返回它的结果，这被称为转发（forwarding），新类中的方法被称为转发方法（forwarding method）。这样地类将会非常稳固，它不依赖于现有类的实现细节，即使现有的类添加了新的方法，也不会影响新的类")]),t._v(" "),s("p",[t._v("如果在适合于使用复合的地方使用了继承，则会不必要地暴露实现细节，这样得到的API会把你限制在原始的实现上，永远的限定了类的性能，更为严重的是，由于暴露了内部的细节，客户端就有可能直接访问这些内部细节")]),t._v(" "),s("blockquote",[s("p",[t._v("因此，虽然继承的功能非常强大，但是也存在诸多问题，因为它违背了封装原则，只有当子类和超类之间确实存在子类型关系时，使用继承才是恰当的。即便如此，如果子类和超类处于不同的包中，并且超类并不是为了继承而设计的，那么继承将会导致脆弱性，为了避免这种脆弱性，可以使用复合和转发机制类代替继承，尤其是当存在适当的接口可以实现包装类的时候，包装类不仅比子类更加健壮，而且功能也更加强大")])]),t._v(" "),s("h2",{attrs:{id:"第十七条：要么为继承而设计，并提供文档说明，要么就禁止继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十七条：要么为继承而设计，并提供文档说明，要么就禁止继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 第十七条：要么为继承而设计，并提供文档说明，要么就禁止继承")]),t._v(" "),s("h2",{attrs:{id:"第十八条：接口优先于抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十八条：接口优先于抽象类","aria-hidden":"true"}},[t._v("#")]),t._v(" 第十八条：接口优先于抽象类")]),t._v(" "),s("blockquote",[s("p",[t._v("Java程序设计语言提供了两种机制，可以用来定义允许多个实现的类型：接口和抽象类。这两种机制之间最明显的区别在于，抽象类允许包含某些方法的实现，但是接口则不允许，一个更为重要的区别在于，为了实现由抽象类定义的类型，类必须称为抽象类的一个子类。任何一个类，只要它定义了所有必要的方法，并且遵守通用约定，他就被允许实现一个接口，而不管这个类是处于类层次（class hierarchy）的哪个位置。因为java只允许单继承，所以抽象类作为类型定义受到极大的限制")])]),t._v(" "),s("h2",{attrs:{id:"第十九条：接口只用于定义类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十九条：接口只用于定义类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 第十九条：接口只用于定义类型")]),t._v(" "),s("blockquote",[s("p",[t._v("有一种接口被称为常量接口（constant interface），它不满足上面的条件，这种接口不包含任何方法，它只包含静态的final域，每个域都导出一个常量，使用了这些常量的类实现了这个接口，以避免用类名来修饰常量名，如下")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    public interface PhysicalConstants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        static final double AVOGADROS_NUMBER "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 6.02214199e23"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        static final double BOLTZMANN_CONSTANT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 1.3806503e-23"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        static final double ELECTRON_MASS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 9.10938188e-31"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("常量接口模式是对接口的不良使用。类在内部使用某些常量，这纯粹是实现细节。实现常量接口，会导致把这样的实现细节泄漏到该类的导出API中吗，类实现常量接口，这对于这个类的用户来讲没有什么价值")]),t._v(" "),s("p",[t._v("如果要导出常量，可以有几种合理的选择方案，如果这些常量与某个现有的类或者接口紧密相关，就应该把这些常量添加到这个类或者接口中如下；如果这些常量最好被看做枚举类型的成员，就应该用枚举类型（enum type）来导出这些常量；不然就应该使用不可实例化的工具类（utility class）来导出这些常量，总之，接口应该只被用来定义类型，它们不应该被用来导出常量")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    public class PhysicalConstants "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        private PhysicalConstants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n        public static final double AVOGADROS_NUMBER "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 6.02214199e23"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        public static final double BOLTZMANN_CONSTANT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 1.3806503e-23"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        public static final double ELECTRON_MASS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 9.10938188e-31"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"第二十条：类层次优于标签类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十条：类层次优于标签类","aria-hidden":"true"}},[t._v("#")]),t._v(" 第二十条：类层次优于标签类")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    class Figure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        enum  Shape "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" RECTANGLE, CIRCLE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        final Shape shape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        double length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        double width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        double redius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Figure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double redius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            shape "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Shape.CIRCLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            this.redius "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        Figure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double length, double width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n             shape "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Shape.RECTANGLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n             this.length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n             this.width "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        double area"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            switch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                case: RECTANGLE:\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" length * width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                case: CIRCLE:\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math.PI * "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redius * redius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                default:\n                    throw new AssertionError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这种标签类（tagged class）有着许多缺点。它们中充斥着样板代码，包括枚举声明、标签域以及条件语句，由于多个实现乱七八糟地挤在单个类中，破坏了可读性。内存占用也增加了，因为实例承担着属于其他风格的不相关的域，标签类过于冗长、容易出错，效率低下。")]),t._v(" "),s("p",[t._v("面向对象的语言如java，提供了其他更好地方法类定义表示多种风格对象的单个数据类型：子类型化（subtyping），标签类正是类层次的一种简单的仿效，可以将上面代码转化为以下的实现方式")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("    abstract class Figure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        abstract double area"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    class Circle extends Figure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        final double radius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Circle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double radius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            this.radius "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" radius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        double area"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math.PI * "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" radius * radius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    class Rectangle extends Figure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        final double length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        final double width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Rectangle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("double length, double width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            this.length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            this.width "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        double area"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" length * width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("这个类层次纠正了前面提到标签类的所有缺点，简单而清楚，每个类型的实现都配有自己的类，这些类都没有受到不相关的数据域的拖累。所有的域都是final的，编译器确保每个类的构造器都初始化它的数据域，对于根类中声明的每个抽象方法，都确保有一个实现，这样杜绝了由于遗漏switch case而导致运行时失败的可能性。另一种好处在于，它们可以用来反映类型之间本质上的层次关系，有助于增强灵活性，并进行更好的编译时类型检查")])]),t._v(" "),s("h2",{attrs:{id:"第二十一条：用函数对象表示策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十一条：用函数对象表示策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 第二十一条：用函数对象表示策略")]),t._v(" "),s("h2",{attrs:{id:"第二十二条：优先考虑静态成员类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二十二条：优先考虑静态成员类","aria-hidden":"true"}},[t._v("#")]),t._v(" 第二十二条：优先考虑静态成员类")])])},[],!1,null,null,null);a.default=e.exports}}]);