(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{817:function(t,e,r){"use strict";r.r(e);var a=r(115),_=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),r("p",[t._v("在面向对象软件系统中，每个类/对象都承担了一定的职责，它们可以相互协作，实现一些复杂的功能，结构型模式（Structural Pattern）关注如何将现有类或对象组织在一起形成更加强大的结构。不同的结构型模式从不同的角度来组合类或对象，在尽可能满足各种面向对象设计原则的同时，为类或对象的组合提供一系列巧妙地解决方案")]),t._v(" "),r("h2",{attrs:{id:"分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("模式名称")]),t._v(" "),r("th",[t._v("定义")]),t._v(" "),r("th",{staticStyle:{"text-align":"right"}},[t._v("使用频率")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("RouterLink",{attrs:{to:"/design/010_AdapterPattern.html"}},[t._v("适配器模式（Adapter Pattern）")])],1),t._v(" "),r("td",[t._v("将一个接口转换为客户希望的另一个接口，使接口不兼容的那些类可以一起工作")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("4星")])]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/design/011_BridgePattern.html"}},[t._v("桥接模式(Bridge Pattern)")])],1),t._v(" "),r("td",[t._v("将抽象部分与其实现部分分离，使它们都可以独立地变化")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("3星")])]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/design/012_CompositePattern.html"}},[t._v("组合模式(Composite Pattern)")])],1),t._v(" "),r("td",[t._v("组合多个对象形成树形结构以表示具有‘整体-部分’关系的层次结构")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("4星")])]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/design/013_DecoratorPattern.html"}},[t._v("装饰模式（Decorator Pattern）")])],1),t._v(" "),r("td",[t._v("动态地给一个对象增加一些额外地职责")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("3星")])]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/design/014_FacadePattern.html"}},[t._v("外观模式(Facade Pattern)")])],1),t._v(" "),r("td",[t._v("外部与一个子系统的通信通过一个统一的外观角色进行，为子系统中的一组接口提供一个一致的入口")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("5星")])]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/design/015_FlyweightPattern.html"}},[t._v("享元模式(Flyweight Pattern)")])],1),t._v(" "),r("td",[t._v("运用共享技术有效地支持大量细粒度对象的复用")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("1星")])]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/design/016_ProxyPattern.html"}},[t._v("代理模式(Proxy Pattern")])],1),t._v(" "),r("td",[t._v("给某一个对象提供一个代理，并由代理对象控制对原对象的引用")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("4星")])])])])])},[],!1,null,null,null);e.default=_.exports}}]);