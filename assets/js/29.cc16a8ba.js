(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{849:function(t,n,a){"use strict";a.r(n);var s=a(115),p=Object(s.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("blockquote",[a("p",[t._v("装饰模式可以在不改变一个对象本身功能的基础上给对象增加额外的新行为。装饰模式时一种用于替换继承的技术，它通过一种无须定义子类的方法来给对象动态添加职责，使用对象之间的关联关系取代类之间的继承关系。在装饰模式中引入了装饰类，在装饰类中既可以调用待装饰的原有类的方法，还可以增加新的方法，以扩充原有类的功能")])]),t._v(" "),a("h2",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("blockquote",[a("p",[t._v("装饰模式（Decorator Pattern）:动态地给一个对象增加一些额外地职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式")])]),t._v(" "),a("h2",{attrs:{id:"结构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构图","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构图")]),t._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"结构图",href:"/pic/design/x6j3YFX.png"}},[a("img",{attrs:{src:"/pic/design/x6j3YFX.png",alt:"结构图"}})])]),t._v(" "),a("p",[t._v("在装饰模式中，为了让系统具有更好地灵活性和可扩展性，通常会定义一个抽象装饰类，而将具体地装饰类作为它的子类，如上结构图所示")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("Component（抽象构件）")]),t._v("：它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法。它的引入可以使客户端以一致的方式处理未被装饰的对象以及装饰之后的对象，实现客户端的透明操作")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ConcreteComponent（具体构件）")]),t._v("：它是抽象构件类的子类，用于定义具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给他额外的职责（方法）")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Decorator（抽象装饰类）")]),t._v("：它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它维护了一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法，并通过其子类扩展该方法，以达到装饰目的")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ConcreteDecorator（具体装饰类）")]),t._v("：它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，可以调用在抽象装饰类中定义的方法，并可以增加新的方法用于扩充对象的行为。")])])]),t._v(" "),a("p",[t._v("由于具体构件类和装饰类都实现了相同的抽象构件接口，因此装饰模式以对客户透明的方法动态地给一个对象附加上更多地责任，换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不需要创造更多子类地情况下，将对象地功能加以扩展。")]),t._v(" "),a("h2",{attrs:{id:"典型代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#典型代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 典型代码")]),t._v(" "),a("p",[a("strong",[t._v("抽象装饰类的设计（装饰模式的核心）")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tclass Decorator implements Component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\n\t\tprivate Component component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t//维持一个对抽象构件对象的引用\n\t\t\n\t\tpublic Decorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tthis.component "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\tpublic void operation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcomponent.operation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t//调用原有业务方法\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在抽象装饰类Decorator中定义了一个Component类型的对象component，维持了一个对抽象构件对象的引用，并可以通过构造方法或者Setting方法将一个Component类型的对象注入进来，同时由于Decorator类实现了抽象构件Component接口，因此需要实现在其中声明的业务方法operation（）。这里需要注意的是，在Decorator中并没有真正实现operation()方法，而只是调用原有的component对象的opertion()方法，它没有真正实施装饰，而是提供一个统一的接口，将具体装饰过程交给其子类完成")]),t._v(" "),a("p",[a("strong",[t._v("在Decorator的子类即具体装饰类中，将继承operation()方法并根据需要进行扩展，典型的具体装饰类代码如下")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tclass ConcreteDecorator extends Decorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tpublic ConcreteDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tsuper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n\t\t\n\t\tpublic void operation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tsuper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t//调用原有业务方法\n\t\t\taddedBehavior"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t//调用新增业务方法\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t//新增业务方法\n\t\tpublic void addedBehavior"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在具体装饰类中可以调用到抽象装饰类的operation()方法，同时可以定义新的业务方法，如addedBehavior()")]),t._v(" "),a("p",[t._v("由于在抽象装饰类Decorator中注入的是Component类型的对象，因此可以将一个具体构件对象注入其中，再通过具体装饰类来进行修饰；此外，还可以将一个已经装饰过的Decorator子类的对象再注入其中进行多次装饰，从而对原有的功能进行多次扩展")]),t._v(" "),a("h2",{attrs:{id:"实例：图形界面构件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例：图形界面构件","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例：图形界面构件")]),t._v(" "),a("h3",{attrs:{id:"结构图-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构图-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构图")]),t._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"结构图",href:"/pic/design/5tDnB82.png"}},[a("img",{attrs:{src:"/pic/design/5tDnB82.png",alt:"结构图"}})])]),t._v(" "),a("p",[t._v("在图中，Component充当抽象构件类，其子类Window,TextBox,ListBox充当具体构件，COmponent类的另一个子类ComponentDecorator充当抽象装饰类，ComponentDecorator的子类ScrollBarDecorator和BlackBorderDecorator充当具体装饰类")]),t._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),a("p",[a("strong",[t._v("抽象界面构件类：抽象构件类")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tabstract class Component "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tpublic abstract void display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("窗口类：具体构建类")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tpublic class Window extends Component "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t\t@Override\n\t\tpublic void display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"显示窗口!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("文本框类：具体构件类")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tpublic class TextBox extends Component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t\t@Override\n\t\tpublic void display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"显示文本框"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("列表框类：具体构件类")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tpublic class ListBox extends Component "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t\t@Override\n\t\tpublic void display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"显示列表框"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("构件装饰类：抽象装饰类")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tpublic class ComponentDecorator extends Component "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t\tprivate Component component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t//维持对抽象构件类型对象的引用\n\t\t\n\t\tpublic ComponentDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tthis.component "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\tpublic void display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcomponent.display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("滚动条装饰类:具体装饰类")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tpublic class ScrollBarDecorator extends ComponentDecorator "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t\tpublic ScrollBarDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tsuper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\tpublic void display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tthis.setScrollBar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tsuper.display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\tpublic void setScrollBar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为构件增加滚动条"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("黑色边框装饰类：具体装饰类")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tpublic class BlackBorderDecorator extends ComponentDecorator "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t\tpublic BlackBorderDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tsuper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t\t@Override\n\t\tpublic void display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tthis.setBlackBorder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tsuper.display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\tpublic void setBlackBorder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tSystem.out.println"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为构件增加黑色边框！"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("客户端测试")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tpublic class Client "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\n\t\tpublic static void main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tComponent component, componentSB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t//使用抽象构件定义\n\t\t\tcomponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t//定义具体构件\n\t\t\tcomponentSB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ScrollBarDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t//定义装饰后的构件\n\t\t\tcomponentSB.display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\tpublic static void main2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tComponent component, componentSB, componentBB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t//全部使用抽象构件定义\n\t\t\tcomponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tcomponentSB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ScrollBarDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n\t\t\tcomponentBB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new BlackBorderDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("componentSB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//将装饰了一次之后的对象继续注入到另外一个装饰类中，进行二次装饰\n\t\t\t\n\t\t\tcomponentBB.display"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"透明装饰模式与半透明装饰模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#透明装饰模式与半透明装饰模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 透明装饰模式与半透明装饰模式")]),t._v(" "),a("p",[a("strong",[t._v("1. 透明装饰模式")])]),t._v(" "),a("p",[t._v("在透明装饰模式中，要求客户端完全针对抽象编程。装饰模式的透明性要求客户端程序不应该将对象声明为具体构件类型或具体装饰类型，而应该全部声明为抽象构件类型。对于客户端类说，具体构件和具体装饰对象没有任何区别。也就是应该使用如下代码：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tComponent c, c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //使用抽象构件类型定义对象\n\tc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ConcreteCompent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tc1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ConcreteCompent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),a("p",[t._v("而不应该是")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tConcreteCompent c；\t\t\t//使用具体构件类型定义对象\n\tConcreteDecorator c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \t//使用具体装饰类型定义对象\n\tc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ConcreteCompent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tc1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ConcreteDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\n")])])]),a("p",[t._v("透明模式可以使得客户端透明地使用装饰之前地对象和装饰之后地对象，无须关心它们的区别；此外，还可以对一个已装饰过的对象进行多次装饰，得到更为复杂，功能更为强大的对象，在实现透明装饰模式时，要求具体装饰类的operation()方法覆盖抽象装饰类的operation(),除了调用原有的对象的operation()外还需呀调用新增的addedBehavior()方法类增加新行为")]),t._v(" "),a("p",[a("strong",[t._v("2. 半透明装饰模式")])]),t._v(" "),a("p",[t._v("透明模式的设计难度较大，而且有时用户需要单独调用新增的业务方法。为了能够调用到新增方法，不得不用具体装饰类型来定义装饰装饰之后的对象，而具体构件类型还是可以使用抽象构件类型来定义的，这种装饰模式即为半透明装饰模式。也就是说对客户端而言，具体构件类型无须关系，是透明的。但是具体装饰类型必须是指定的，这是不透明的。如下")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\tComponent c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //使用抽象构件类型定义对象\n\tc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ConcreteCompent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n\tConcreteCompent c；\t\t\t//使用具体构件类型定义对象\n\tc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ConcreteCompent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("半透明装饰模式可以给系统带来更多的灵活性，设计相对简单，使用起来也方便；但是最大的缺点就是不能实现对同一个对象的多次装饰，而且客户端需要有区别地对待装饰之前的对象和装饰之后的对象。在实现半透明的装饰模式时，只需要在具体装饰类中增加一个独立的addBehavior()方法来封装相应的业务处理，由于客户端使用具体装饰类型来定义装饰后的对象，因此可以单独调用addBehavior()方法来扩展系统功能。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("装饰模式降低了系统的耦合度，可以动态地增加或删除对象地职责，并使得需要装饰地具体构件类和具体装饰类可以独立变化，以便增加新的具体构件类和具体装饰类。在软件开发中，装饰模式应用较为广泛，例如在Java IO中的输入流和输出流的设计，javax.swing包中一些图像界面构件的增强等地方都用了装饰模式")]),t._v(" "),a("h2",{attrs:{id:"主要优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要优点","aria-hidden":"true"}},[t._v("#")]),t._v(" 主要优点")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("对于扩展一个对象的功能，装饰模式比继承更为灵活性，不会导致类的个数急剧增加")])]),t._v(" "),a("li",[a("p",[t._v("可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以运行时选择不同的具体装饰类，从而实现不同的行为")])]),t._v(" "),a("li",[a("p",[t._v("可以对一个对象进行多次装饰，通过不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能更为强大的对象")])]),t._v(" "),a("li",[a("p",[t._v("具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合开闭原则")])])]),t._v(" "),a("h2",{attrs:{id:"主要缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要缺点","aria-hidden":"true"}},[t._v("#")]),t._v(" 主要缺点")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，大量小对象的产生势必会占用更多的系统资源，一定程度上影响性能")])]),t._v(" "),a("li",[a("p",[t._v("装饰模式提供了一种比继承更加灵活机动的解决方案，但同时也意味着比继承更加易于出错，排错也很困难，对于多次装饰的对象，调式时寻找错误可能需要逐级排查，较为繁琐")])])]),t._v(" "),a("h2",{attrs:{id:"适用场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适用场合","aria-hidden":"true"}},[t._v("#")]),t._v(" 适用场合")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在不影响其他对象的情况下，以动态透明的方式给单个对象添加职责")])]),t._v(" "),a("li",[a("p",[t._v("当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。不能采用继承的情况主要有两种：第一类是系统中存在大量独立的扩展，为支持每一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因为类已定义为不能被继承（如final类）")])])])])},[],!1,null,null,null);n.default=p.exports}}]);