(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{826:function(a,t,r){"use strict";r.r(t);var e=r(115),s=Object(e.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),r("blockquote",[r("p",[a._v("主要讨论Java语言的设计细节，讨论局部变量的处理、控制结构、类库的用法，各种数据类型的用法，以及两种不是由语言本身提供的机制（reflection和native method，反射机制和本地方法）的用户，最后讨论了优化和命名惯例")])]),a._v(" "),r("h2",{attrs:{id:"第四十五条：将局部变量的作用域最小化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第四十五条：将局部变量的作用域最小化","aria-hidden":"true"}},[a._v("#")]),a._v(" 第四十五条：将局部变量的作用域最小化")]),a._v(" "),r("h2",{attrs:{id:"第四十六条：for-each循环优先于传统的for循环"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第四十六条：for-each循环优先于传统的for循环","aria-hidden":"true"}},[a._v("#")]),a._v(" 第四十六条：for-each循环优先于传统的for循环")]),a._v(" "),r("h2",{attrs:{id:"第四十七条：了解和使用类库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第四十七条：了解和使用类库","aria-hidden":"true"}},[a._v("#")]),a._v(" 第四十七条：了解和使用类库")]),a._v(" "),r("h2",{attrs:{id:"第四十八条：如果需要精确的答案，请避免使用float和double"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第四十八条：如果需要精确的答案，请避免使用float和double","aria-hidden":"true"}},[a._v("#")]),a._v(" 第四十八条：如果需要精确的答案，请避免使用float和double")]),a._v(" "),r("blockquote",[r("p",[a._v("float和double类型主要是为了科学计算和工程计算而设计的，它们执行二进制浮点运算，这是为了在广泛的数值范围上提供较为精准的快速近似计算而精心设计的，但是它们并没有提供完全精确的结果，所以不应该被用于需要精确结果的场合，比如货币计算")])]),a._v(" "),r("h2",{attrs:{id:"第四十九条：基本类型优先于装箱基本类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第四十九条：基本类型优先于装箱基本类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 第四十九条：基本类型优先于装箱基本类型")]),a._v(" "),r("p",[a._v("Java系统有一个类型系统由两部分组成，包含基本类型，如int、double和boolean和引用类型，如String和List，每个基本类型都有一个对应的引用类型，称作装箱基本类型，装箱基本类型中对应int、double和boolean的是Integer、Double和Boolean")]),a._v(" "),r("p",[a._v("在基本类型和装箱基本类型之间有三个主要区别，第一，基本类型只有值，而装箱基本类型则具有与它们的值不同的同一性，第二，基本类型只有功能完备的值，而每个装箱基本类型除了它对应基本类型的所有功能外，还有非功能值：null，最后一点区别是，基本类型通常比装箱基本类型更节省时间和空间")]),a._v(" "),r("p",[a._v("当可以选择时，基本类型要优先于装箱基本类型，基本类型更加简单，也更加快速。如果必须使用装箱基本类型时，要小心！自动装箱减少了使用装箱基本类型的繁琐性，但是没有减少它的风险")]),a._v(" "),r("h2",{attrs:{id:"第五十条：如果其他类型更适合，则尽量避免使用字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五十条：如果其他类型更适合，则尽量避免使用字符串","aria-hidden":"true"}},[a._v("#")]),a._v(" 第五十条：如果其他类型更适合，则尽量避免使用字符串")]),a._v(" "),r("blockquote",[r("p",[a._v("如果可以使用更加适合的数据类型，或可以编写更加适当的数据类型，就应该避免使用字符串来表示对象。若使用不当，字符串会比其他类型更加笨拙，更不灵活，速度更慢，也更加容易出错，经常被错误地用字符串来代替的类型包括基本类型，枚举类型和聚集类型")])]),a._v(" "),r("h2",{attrs:{id:"第五十一条：当心字符串连接的性能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五十一条：当心字符串连接的性能","aria-hidden":"true"}},[a._v("#")]),a._v(" 第五十一条：当心字符串连接的性能")]),a._v(" "),r("blockquote",[r("p",[a._v("不要使用字符串连接操作符（+）来合并多个字符串，除非性能无关紧要，相反应该使用StringBuilder的append方法，另一种方法是，使用字符数组，或者每次只处理一个字符串，而不是将它们组合起来")])]),a._v(" "),r("h2",{attrs:{id:"第五十二条：通过接口引用对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五十二条：通过接口引用对象","aria-hidden":"true"}},[a._v("#")]),a._v(" 第五十二条：通过接口引用对象")]),a._v(" "),r("h2",{attrs:{id:"第五十三条：接口优先于反射机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五十三条：接口优先于反射机制","aria-hidden":"true"}},[a._v("#")]),a._v(" 第五十三条：接口优先于反射机制")]),a._v(" "),r("blockquote",[r("p",[a._v("反射机制是一种功能强大的机制，对于特定的复杂系统编程任务，它是非常必要的，但是它也有一些缺点（如丧失了编译时类型检查的好处，执行反射访问所需要的代码非常笨拙和冗长以及性能损失），如果编写的程序必须要与编译时未知的类一起工作，如有可能，就应该仅仅使用反射机制来实例化对象，而访问对象时则使用编译时已知的某个接口或者超类")])]),a._v(" "),r("h2",{attrs:{id:"第五十四条：谨慎地使用本地方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五十四条：谨慎地使用本地方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 第五十四条：谨慎地使用本地方法")]),a._v(" "),r("h2",{attrs:{id:"第五十五条：谨慎地进行优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五十五条：谨慎地进行优化","aria-hidden":"true"}},[a._v("#")]),a._v(" 第五十五条：谨慎地进行优化")]),a._v(" "),r("h2",{attrs:{id:"第五十六条：遵守普遍接受的命名惯例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五十六条：遵守普遍接受的命名惯例","aria-hidden":"true"}},[a._v("#")]),a._v(" 第五十六条：遵守普遍接受的命名惯例")])])},[],!1,null,null,null);t.default=s.exports}}]);